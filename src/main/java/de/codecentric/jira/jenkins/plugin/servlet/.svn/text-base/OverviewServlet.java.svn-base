package de.codecentric.jira.hudson.plugin.servlet;
 
import static com.google.common.base.Preconditions.checkNotNull;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.auth.*;
import org.apache.commons.httpclient.methods.*;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import com.atlassian.crowd.embedded.api.User;
import com.atlassian.jira.security.JiraAuthenticationContext;
import com.atlassian.jira.util.I18nHelper;
import com.atlassian.jira.web.bean.I18nBean;
import com.atlassian.templaterenderer.TemplateRenderer;

import de.codecentric.jira.hudson.plugin.ao.Server;
import de.codecentric.jira.hudson.plugin.ao.ServerService;
import de.codecentric.jira.hudson.plugin.model.BuildType;
import de.codecentric.jira.hudson.plugin.model.HudsonBuild;
import de.codecentric.jira.hudson.plugin.model.HudsonJob;
import de.codecentric.jira.hudson.plugin.util.URLEncoder;

/**
 * Gives a overview of the Hudson jobs.
 * 
 */ 
public class OverviewServlet extends HttpServlet {
	
	private static final String DATE_FORMAT = "yyMMddHHmmssZ";
	private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(DATE_FORMAT);

	private static final String PARAM_HUDSON_URL = "hudsonUrl";
	private static final String PARAM_VIEW = "view";
	
    private static final String TEMPLATE_PATH = "/templates/hudson.vm";
    private final TemplateRenderer templateRenderer;
    private final JiraAuthenticationContext authenticationContext;
    private final ServerService serverService;
    
    private HttpClient client;
    private Credentials defaultcreds;
    
    public OverviewServlet(TemplateRenderer templateRenderer, ServerService serverService, JiraAuthenticationContext authenticationContext) {
        this.templateRenderer = templateRenderer;
        this.serverService = checkNotNull(serverService);
        this.authenticationContext = authenticationContext;
        this.client = new HttpClient(new MultiThreadedHttpConnectionManager());
  	  
    	client.getParams().setAuthenticationPreemptive(true);
    	  
       }
    
    /**
     * This function takes post data and calls doGet()
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	doGet(request, response);
    }
    
    /**
     * This function takes get data and renders the template
     */
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
    {
		Map<String, Object> velocityValues = new HashMap<String, Object>();

		try {
			String urlHudsonServer = req.getParameter(PARAM_HUDSON_URL);
			String view = req.getParameter(PARAM_VIEW);
			String userName = req.getParameter("userName");
			String password = req.getParameter("password");

			User user = authenticationContext.getLoggedInUser();
			I18nHelper i18nHelper = new I18nBean(user);
			
			//check if urlHudsonServer equals Server.name
			Server server = serverService.find(urlHudsonServer);
			if(server!=null){
				urlHudsonServer = server.getUrl();
			}
			
			if (urlHudsonServer.lastIndexOf('/') < urlHudsonServer.length()-1) {
				urlHudsonServer += "/";
			}
			
			List<HudsonJob> portletData;
			
			//Test if authorization is available
			if(userName=="" && password==""){
				portletData = getJobListByServer(urlHudsonServer, view, i18nHelper);
				velocityValues.put("user", "anonymous");
			}else{
				defaultcreds = new UsernamePasswordCredentials(userName, password);
		    	client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);

				portletData = getJobListByServerAuth(urlHudsonServer, view, i18nHelper);
				
				velocityValues.put("user", userName);
			}
			
			velocityValues.put("serverList", serverService.all());
			velocityValues.put("hudsonUrl", urlHudsonServer);
			velocityValues.put("view", view);
			velocityValues.put("jobs", portletData);
			velocityValues.put("context", this.getServletContext());
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
		resp.setContentType("text/html;charset=utf-8");
        templateRenderer.render(TEMPLATE_PATH, velocityValues, resp.getWriter());
    }
    
    /**
	 * Creates a Hudson Job List if authorization is required
	 * @return Hudson Job List
	 */
    @SuppressWarnings("unchecked")
	private List<HudsonJob> getJobListByServerAuth(String urlHudsonServer, String view, I18nHelper i18nHelper)
			throws MalformedURLException, DocumentException {
    	
		List<HudsonJob> jobList = new ArrayList<HudsonJob>();

		String jobListUrl = urlHudsonServer + (StringUtils.isNotEmpty(view) ? "view/" + view : "")
				+ "/api/xml?depth=1";
		PostMethod post = new PostMethod(jobListUrl);
		
		Document jobsDocument = null;
		try{
		client.executeMethod(post);
		jobsDocument = new SAXReader().read(post.getResponseBodyAsStream());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			post.releaseConnection(); 
		}
		
		// if hudsonUrl is invalid
		if(jobsDocument==null){
			return jobList;
		}
		
		// get all jobs from xml and add them to list
		for (Element job : (List<Element>) jobsDocument.getRootElement().elements("job")) {
			// create a new job and set all params from xml
			HudsonJob hJob = new HudsonJob();
			String jobName = job.elementText("name");
			hJob.setName(jobName);
			hJob.setUrl(job.elementText("url"));
			hJob.setBuildTrigger(hJob.getUrl() + "/build");
			hJob.setColor(job.elementText("color"));
			hJob.setLastSuccBuild(createBuildAuth(urlHudsonServer, jobName, BuildType.LAST_SUCCESS, i18nHelper));
			hJob.setLastFailBuild(createBuildAuth(urlHudsonServer, jobName, BuildType.LAST_FAIL, i18nHelper));

			jobList.add(hJob);
		}

		return jobList;
	}

    /**
	 * Creates HudsonBuild if authorization is required
	 * @return HudsonBuild
	 */
	private HudsonBuild createBuildAuth(String urlHudsonServer, String jobName, BuildType type, I18nHelper i18nHelper) {
		HudsonBuild build = new HudsonBuild();
		build.setI18nHelper(i18nHelper);
		String encodedJobName = URLEncoder.encodeForURL(jobName);
		PostMethod post = new PostMethod(urlHudsonServer + "job/" + encodedJobName + "/" + type.toString()
				+ "/buildNumber");
		try {
			client.executeMethod(post);
			build.setNumber(post.getResponseBodyAsString());
			build.setUrl(urlHudsonServer + "job/" + encodedJobName + "/" + build.getNumber());
		} catch (MalformedURLException e) {
			return HudsonBuild.UNKNOWN;
		} catch (IOException e) {
			return HudsonBuild.UNKNOWN;
		}finally{
			post.releaseConnection();
		}

		// if we were able to obtain a build number, there should also a date
		// and time exist ...
		post = new PostMethod(urlHudsonServer + "job/" + encodedJobName + "/" + type.toString()
				+ "/buildTimestamp?format=" + DATE_FORMAT);
		try {
			client.executeMethod(post);
			build.setTimestamp(SIMPLE_DATE_FORMAT.parse(post.getResponseBodyAsString())); 
		} catch (MalformedURLException e) {
			return HudsonBuild.UNKNOWN;
		} catch (IOException e) {
			return HudsonBuild.UNKNOWN;
		} catch (ParseException e) {
			return HudsonBuild.UNKNOWN;
		}finally{
			post.releaseConnection(); 
		}

		return build;
	}
	
	/**
	 * Creates a Hudson Job List if no authorization is required
	 * @return Hudson Job List
	 */
	@SuppressWarnings("unchecked")
	private List<HudsonJob> getJobListByServer(String urlHudsonServer, String view, I18nHelper i18nHelper)
			throws MalformedURLException, DocumentException {

		List<HudsonJob> jobList = new ArrayList<HudsonJob>();

		String jobListUrl = urlHudsonServer + (StringUtils.isNotEmpty(view) ? "view/" + view : "")
				+ "/api/xml?depth=1";
		Document jobsDocument = new SAXReader().read(new URL(jobListUrl));

		// get all jobs from xml and add them to list
		for (Element job : (List<Element>) jobsDocument.getRootElement().elements("job")) {

			// create a new job and set all params from xml
			HudsonJob hJob = new HudsonJob();
			String jobName = job.elementText("name");
			hJob.setName(jobName);
			hJob.setUrl(job.elementText("url"));
			hJob.setBuildTrigger(hJob.getUrl() + "/build");
			hJob.setColor(job.elementText("color"));
			hJob.setLastSuccBuild(createBuild(urlHudsonServer, jobName, BuildType.LAST_SUCCESS, i18nHelper));
			hJob.setLastFailBuild(createBuild(urlHudsonServer, jobName, BuildType.LAST_FAIL, i18nHelper));

			jobList.add(hJob);
		}

		return jobList;
	}
	
	/**
	 * Creates HudsonBuild if no authorization is required
	 * @return HudsonBuild
	 */
	private HudsonBuild createBuild(String urlHudsonServer, String jobName, BuildType type, I18nHelper i18nHelper) {
		HudsonBuild build = new HudsonBuild();
		build.setI18nHelper(i18nHelper);
		String encodedJobName = URLEncoder.encodeForURL(jobName);
		try {
			URL urlBuildNumber = new URL(urlHudsonServer + "job/" + encodedJobName + "/" + type.toString()
					+ "/buildNumber");
			build.setNumber(IOUtils.toString((InputStream) urlBuildNumber.getContent()));
			build.setUrl(urlHudsonServer + "job/" + encodedJobName + "/" + build.getNumber());
		} catch (MalformedURLException e) {
			return HudsonBuild.UNKNOWN;
		} catch (IOException e) {
			return HudsonBuild.UNKNOWN;
		}

		// if we were able to obtain a build number, there should also a date
		// and time exist ...
		try {
			URL urlTimestamp = new URL(urlHudsonServer + "job/" + encodedJobName + "/" + type.toString()
					+ "/buildTimestamp?format=" + DATE_FORMAT);
			build.setTimestamp(SIMPLE_DATE_FORMAT.parse(IOUtils.toString((InputStream) urlTimestamp.getContent())));
		} catch (MalformedURLException e) {
			System.out.println("test1");
			return HudsonBuild.UNKNOWN;
		} catch (IOException e) {
			System.out.println("test2");
			return HudsonBuild.UNKNOWN;
		} catch (ParseException e) {
			System.out.println("test3");
			return HudsonBuild.UNKNOWN;
		}

		return build;
	}
}