package de.codecentric.jira.hudson.plugin.util;
/**
 * Copyright 2012 codecentric GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */


import java.util.LinkedHashMap;
import java.util.Map;

import com.atlassian.configurable.ValuesGenerator;
import com.atlassian.jira.util.I18nHelper;
import com.atlassian.jira.web.bean.I18nBean;
import com.atlassian.crowd.embedded.api.User;

/**
 * This class produces the values which will be displayed in the configuration
 * screen of the Jira portlet.
 * 
 * This class is not used in the gadget-version of the plugin. 
 * The data generated by this class is now maintained in the userpref "trend" in the chartGadget.xml.
 * 
 */
public class JenkinsChartTypeValues implements ValuesGenerator {

	/**
	 * @return values The data structure in which the information will be send
	 *         to the Jira configuration screen.
	 */
	public Map getValues(Map userParams) {
		I18nHelper i18nHelper = new I18nBean((User) userParams.get("User"));
		/*
		 * 
		 * 
		 * build time buildTimeGraph/trend
		 * 
		 * test test/trend
		 * 
		 * compiler warnings warnings/trend
		 * 
		 * checkstyle checkstyle/trend?useHealthBuilder=false
		 * 
		 * tasks tasks/trend?useHealthBuilder=false
		 * 
		 * findbugs findbugs/trend
		 * 
		 * cobertura cobertura/graph
		 */
		// use LinkedHashMap, so that items are shown in this order
		Map<String, String> values = new LinkedHashMap<String, String>();
		values.put("portlet.chart.trend.test", i18nHelper.getText("portlet.chart.trend.test.description"));
		values.put("portlet.chart.trend.warning", i18nHelper.getText("portlet.chart.trend.warning.description"));
		values.put("portlet.chart.trend.buildtime", i18nHelper.getText("portlet.chart.trend.buildtime.description"));
		values.put("portlet.chart.trend.checkstyle", i18nHelper.getText("portlet.chart.trend.checkstyle.description"));
		values.put("portlet.chart.trend.task", i18nHelper.getText("portlet.chart.trend.task.description"));
		values.put("portlet.chart.trend.findbugs", i18nHelper.getText("portlet.chart.trend.findbugs.description"));
		values.put("portlet.chart.trend.cobertura", i18nHelper.getText("portlet.chart.trend.cobertura.description"));

		return values;
	}

}
